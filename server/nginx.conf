#用户和组
#user nginx nginx;

#进程数，一般为cpu核数 auto”将自动检测
worker_processes auto;

#将worker process与指定cpu核绑定
#worker_cpu_affinity 0001 0010 0100 1000; #四核配置示例

#一个进程打开的文件描述符数量，和系统的单进程打开文件数一致
#worker_rlimit_nofile 102400;

#进程路径
#pid logs/nginx.pid;

#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]
#error_log logs/error.log;
#error_log logs/error.log notice;
#error_log logs/error.log info;

#所有处理连接的设置
events {
    worker_connections 1024; #一个进程同时打开的最大连接数
    
    multi_accept on; #收到一个新连接通知后接受尽可能多的连接
    
    #use epoll;#使用的网络I/O模型 Linux用epoll，FreeBSD用kqueue
}

http {
    include mime.types; #文件扩展名与文件类型映射表
    
    default_type application/octet-stream; #默认文件类型
    
    charset UTF-8; #编码格式
    
    server_name_hash_bucket_size 128; #服务器名字的hash表大小
    
    #客户端头文件相关设置
    client_header_buffer_size 16k; #缓存大小
    large_client_header_buffers 4 32k; #最大缓存数量和大小（当请求头大小大于指定大小时生效）
    #client_max_body_size 8m; #上传大小限制
    
    #高效文件传输模式，如果用来进行下载等应用磁盘IO重负载应用，可设置为off
    sendfile on;
    
    #tcp_nopush on;  #防止网络阻塞
    #tcp_nodelay on;#防止网络延迟
    
    keepalive_timeout 65; #长连接超时时间，单位是秒
    
    #目录列表访问，默认关闭。也可以在server配置中对某文件夹单独指定
    #autoindex on;
    #autoindex_exact_size  off; #精确显示文件大小
    #autoindex_localtime on; #显示的文件时间为文件的服务器时间
    
    #10m之后下载速度为10k
    limit_rate_after 10m;
    limit_rate 10k;

    #访问日志及日志格式
    #access_log logs/access.log main;
    #log_format main '$remote_addr - $remote_user [$time_local] "$request"''$status $body_bytes_sent "$http_referer" ''"$http_user_agent" "$http_x_forwarded_for"';

    #gzip相关
    gzip on; #启用压缩形式发送数据
    gzip_buffers 4 16k; #压缩缓冲区数量和大小
    gzip_disable "msie6";  #在指定客户端禁用gzip（msie6即ie6)
    gzip_static on; #压缩资源之前，先查找是否有预先gzip处理过的资源
    gzip_proxied any; #压缩基于请求和响应的响应流。any表示压缩所有的请求
    gzip_min_length 10000; #数据启用压缩的最小大小（单位字节）
    gzip_comp_level 5; #压缩等级（值：1至9）
    #需要压缩的数据格式
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript; 
    gzip_vary on; #根据客户端HTTP头判断是否需要压缩（不支持压缩时则不启用压缩）

    #FastCGI相关设置
    fastcgi_connect_timeout 300;
    fastcgi_send_timeout 300;
    fastcgi_read_timeout 300;
    fastcgi_buffer_size 64k;
    fastcgi_buffers 4 64k;
    fastcgi_busy_buffers_size 128k;
    fastcgi_temp_file_write_size 128k;
    
    #缓存相关设置
    open_file_cache max=100000 inactive=30s; #最大缓存数量和缓存时间
    open_file_cache_valid 30s; #检测正确缓存信息的时间间隔
    open_file_cache_min_uses 2; #不活动时间期间里最小的文件数
    open_file_cache_errors on; #搜索一个文件时是否缓存错误信息

    #负载均衡
    #upstream example.com {
        #server 192.168.80.121:80 weight=3; #weight是权重
        #server 192.168.80.122:80 weight=2; #权重越大被分配到的几率越大。
        #server 192.168.80.123:80 weight=3;
    }

    #虚拟主机配置，可用include从其他文件中引入各个server配置文件
    #include conf.d/*.conf; #从conf.d/目录引入所有.conf结尾的文件
    server {
        listen 80; #80是默认端口，如未设置默认监听80
        server_name localhost; #主机名 ip/域名
        #启用的字符集
        #charset koi8-r; #默认的koi8-r是斯拉夫文字，供保加利亚语和俄语使用（因为nginx发起者是俄国人）

        #access_log logs/host.access.log main; #访问日志文件的存放路径

        root /srv/http; #根目录，也可以写在location中

        index index.html index.php; #默认主页文件，也可以写在location中

        #error_page 404 /404.html; #404页面

        #error_page 500 502 503 504  /50x.html; #50x页面
        #location = /50x.html {
            #root /usr/share/nginx/html;
        #}

        #缓存静态文件
        location ~* ^.+\.(swf|gif|png|jpg|js|css)$ {
            root /usr/local/ku6/ktv/show.ku6.com/;
            expires 1m; #过期时间
        }
        
        #为Apache提供的php fastcgi代理
        #location ~ \.php$ {
            #proxy_pass http://127.0.0.1;
        #}

        # php文件解析示例
        #location ~ \.php$ {
            #root html;
            #fastcgi_pass 127.0.0.1:9000;
            #fastcgi_index index.php;
            #fastcgi_param SCRIPT_FILENAME  /scripts$fastcgi_script_name;
            #include fastcgi_params;
        #}

         #反向代理
        #location / {
            #proxy_pass http://127.0.0.1:88;
            #proxy_redirect off;
            #proxy_set_header X-Real-IP $remote_addr;
            #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; #获取用户ip
            #以下是一些反向代理的配置，可选
            #proxy_set_header Host $host;
            #client_max_body_size 10m; #允许客户端请求的最大单文件字节数
            #client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，
            #proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)
            #proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)
            #proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)
            #proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小
            #proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置
            #proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）
            #proxy_temp_file_write_size 64k; #设定缓存文件夹大小，大于这个值，将从upstream服务器传
        #}

        # 禁止.htacess文件
        #location ~ /\.ht {
            #deny all;
        #}

        #禁止指定ip的访问
        #deny 1.2.3.4;
    }

    #禁止使用ip访问
    #server{
        #listen 80;
        #server_name: ip;# ip处填写服务器ip地址
        #return 444;
    #}

    # HTTPS server配置
    #server {
        #listen       443 ssl;
        #server_name  localhost;
        #ssl_certificate      cert.pem;
        #ssl_certificate_key  cert.key;
        #ssl_session_cache    shared:SSL:1m;
        #ssl_session_timeout  5m;
        #ssl_ciphers  HIGH:!aNULL:!MD5;
        #ssl_prefer_server_ciphers  on;
        #location / {
            #root   html;
            #index  index.html index.htm;
        #}
    #}

}
